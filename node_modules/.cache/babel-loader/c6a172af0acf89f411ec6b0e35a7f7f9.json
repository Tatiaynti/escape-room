{"ast":null,"code":"import { Genres } from \"const.js\";\nimport { createSelector } from \"reselect\";\n\nconst getCurrentGenre = state => state.currentGenre;\n\nconst getQuests = state => state.quests; // const getCurrentQuest = (state) => state.currentQuest;\n\n\nconst getCurrentQuest = (questsArray, id) => {\n  var _questsArray$find;\n\n  return (_questsArray$find = questsArray.find(questItem => filmItem.id === Number(id))) !== null && _questsArray$find !== void 0 ? _questsArray$find : null;\n};\n\nconst getQuestsByGenre = createSelector([getQuests, getCurrentGenre], (quests, genre) => {\n  if (genre === Genres.AllQuests) {\n    return quests;\n  }\n\n  return quests.filter(quest => quest.type === genre);\n});\nexport { getCurrentQuest, getCurrentGenre, getQuestsByGenre };","map":{"version":3,"sources":["/Users/tatiana/Desktop/grading-starter-pack-main/escape-room/src/store/selectors.js"],"names":["Genres","createSelector","getCurrentGenre","state","currentGenre","getQuests","quests","getCurrentQuest","questsArray","id","find","questItem","filmItem","Number","getQuestsByGenre","genre","AllQuests","filter","quest","type"],"mappings":"AAAA,SAASA,MAAT,QAAuB,UAAvB;AACA,SAASC,cAAT,QAA+B,UAA/B;;AAEA,MAAMC,eAAe,GAAIC,KAAD,IAAWA,KAAK,CAACC,YAAzC;;AACA,MAAMC,SAAS,GAAIF,KAAD,IAAWA,KAAK,CAACG,MAAnC,C,CACA;;;AACA,MAAMC,eAAe,GAAG,CAACC,WAAD,EAAcC,EAAd;AAAA;;AAAA,8BACtBD,WAAW,CAACE,IAAZ,CAAkBC,SAAD,IAAeC,QAAQ,CAACH,EAAT,KAAgBI,MAAM,CAACJ,EAAD,CAAtD,CADsB,iEACyC,IADzC;AAAA,CAAxB;;AAGA,MAAMK,gBAAgB,GAAGb,cAAc,CACrC,CAACI,SAAD,EAAYH,eAAZ,CADqC,EAErC,CAACI,MAAD,EAASS,KAAT,KAAmB;AACjB,MAAIA,KAAK,KAAKf,MAAM,CAACgB,SAArB,EAAgC;AAC9B,WAAOV,MAAP;AACD;;AAED,SAAOA,MAAM,CAACW,MAAP,CAAeC,KAAD,IAAWA,KAAK,CAACC,IAAN,KAAeJ,KAAxC,CAAP;AACD,CARoC,CAAvC;AAWA,SAAQR,eAAR,EAAyBL,eAAzB,EAA0CY,gBAA1C","sourcesContent":["import { Genres } from \"const.js\";\nimport { createSelector } from \"reselect\";\n\nconst getCurrentGenre = (state) => state.currentGenre;\nconst getQuests = (state) => state.quests;\n// const getCurrentQuest = (state) => state.currentQuest;\nconst getCurrentQuest = (questsArray, id) =>\n  questsArray.find((questItem) => filmItem.id === Number(id)) ?? null;\n\nconst getQuestsByGenre = createSelector(\n  [getQuests, getCurrentGenre],\n  (quests, genre) => {\n    if (genre === Genres.AllQuests) {\n      return quests;\n    }\n\n    return quests.filter((quest) => quest.type === genre);\n  },\n);\n\nexport {getCurrentQuest, getCurrentGenre, getQuestsByGenre};\n"]},"metadata":{},"sourceType":"module"}