{"ast":null,"code":"import { Genres } from \"const.js\";\nimport { setCurrentQuest, setQuests } from \"./actions.js\"; // const SUCCES_SEND_ORDER_MESSAGE = 'Ваш заказ отправлен';\n// const ERROR_SEND_ORDER_MESSAGE = 'Ошибка отправки заказа';\n\nconst GenresAdapter = {\n  'adventures': Genres.Adventures,\n  'horror': Genres.Horrors,\n  'mystic': Genres.Mystic,\n  'detective': Genres.Detective,\n  'sci-fi': Genres.SciFi\n};\n\nconst adaptQuestsToClient = quest => {\n  return { ...quest,\n    type: GenresAdapter[quest.type]\n  };\n};\n\nconst fetchQuestsAction = () => async (dispatch, _getState, api) => {\n  await api.get('/quests').then(response => response.data.map(quest => adaptQuestsToClient(quest))).then(response => dispatch(setQuests(response)));\n};\n\nconst fetchCurrentQuestAction = questId => async (dispatch, _getState, api) => {\n  await api.get(`/quests/${questId}`).then(response => adaptQuestsToClient(response.data)).then(response => dispatch(setCurrentQuest()));\n};\n\nconst sendNewOrderAction = (orderPost, closeForm) => async (_dispatch, _getState, api) => {\n  try {\n    await api.post('/orders', orderPost).then(response => {\n      if (response) {\n        // toast.info(SUCCES_SEND_ORDER_MESSAGE);\n        closeForm();\n      }\n    });\n  } catch {// toast.error(ERROR_SEND_ORDER_MESSAGE)\n  }\n};\n\nexport { fetchQuestsAction, fetchCurrentQuestAction, sendNewOrderAction };","map":{"version":3,"sources":["/Users/tatiana/Desktop/grading-starter-pack-main/escape-room/src/store/api-actions.js"],"names":["Genres","setCurrentQuest","setQuests","GenresAdapter","Adventures","Horrors","Mystic","Detective","SciFi","adaptQuestsToClient","quest","type","fetchQuestsAction","dispatch","_getState","api","get","then","response","data","map","fetchCurrentQuestAction","questId","sendNewOrderAction","orderPost","closeForm","_dispatch","post"],"mappings":"AAAA,SAASA,MAAT,QAAuB,UAAvB;AACA,SAASC,eAAT,EAA0BC,SAA1B,QAA2C,cAA3C,C,CAEA;AACA;;AAEA,MAAMC,aAAa,GAAG;AACpB,gBAAeH,MAAM,CAACI,UADF;AAEpB,YAAUJ,MAAM,CAACK,OAFG;AAGpB,YAAUL,MAAM,CAACM,MAHG;AAIpB,eAAaN,MAAM,CAACO,SAJA;AAKpB,YAAUP,MAAM,CAACQ;AALG,CAAtB;;AAQA,MAAMC,mBAAmB,GAAIC,KAAD,IAAW;AACrC,SAAO,EAAC,GAAGA,KAAJ;AAAWC,IAAAA,IAAI,EAAGR,aAAa,CAACO,KAAK,CAACC,IAAP;AAA/B,GAAP;AACD,CAFD;;AAIA,MAAMC,iBAAiB,GAAG,MACxB,OAAOC,QAAP,EAAiBC,SAAjB,EAA4BC,GAA5B,KAAoC;AAClC,QAAMA,GAAG,CAACC,GAAJ,CAAQ,SAAR,EACHC,IADG,CACGC,QAAD,IAAcA,QAAQ,CAACC,IAAT,CAAcC,GAAd,CAAkBV,KAAK,IAAID,mBAAmB,CAACC,KAAD,CAA9C,CADhB,EAEHO,IAFG,CAEGC,QAAD,IAAcL,QAAQ,CAACX,SAAS,CAACgB,QAAD,CAAV,CAFxB,CAAN;AAGD,CALH;;AAOA,MAAMG,uBAAuB,GAAIC,OAAD,IAC9B,OAAOT,QAAP,EAAiBC,SAAjB,EAA4BC,GAA5B,KAAoC;AAClC,QAAMA,GAAG,CAACC,GAAJ,CAAS,WAAUM,OAAQ,EAA3B,EACHL,IADG,CACEC,QAAQ,IAAIT,mBAAmB,CAACS,QAAQ,CAACC,IAAV,CADjC,EAEHF,IAFG,CAEEC,QAAQ,IAAIL,QAAQ,CAACZ,eAAe,EAAhB,CAFtB,CAAN;AAGD,CALH;;AAOA,MAAMsB,kBAAkB,GAAG,CAACC,SAAD,EAAYC,SAAZ,KACzB,OAAOC,SAAP,EAAkBZ,SAAlB,EAA6BC,GAA7B,KAAqC;AACnC,MAAG;AACD,UAAMA,GAAG,CAACY,IAAJ,CAAS,SAAT,EAAoBH,SAApB,EACLP,IADK,CACCC,QAAD,IAAc;AAClB,UAAGA,QAAH,EAAY;AACV;AACAO,QAAAA,SAAS;AACV;AACF,KANK,CAAN;AAOD,GARD,CAQE,MAAM,CACN;AACD;AACF,CAbH;;AAeA,SAAQb,iBAAR,EAA2BS,uBAA3B,EAAoDE,kBAApD","sourcesContent":["import { Genres } from \"const.js\";\nimport { setCurrentQuest, setQuests } from \"./actions.js\";\n\n// const SUCCES_SEND_ORDER_MESSAGE = 'Ваш заказ отправлен';\n// const ERROR_SEND_ORDER_MESSAGE = 'Ошибка отправки заказа';\n\nconst GenresAdapter = {\n  'adventures' : Genres.Adventures,\n  'horror': Genres.Horrors,\n  'mystic': Genres.Mystic,\n  'detective': Genres.Detective,\n  'sci-fi': Genres.SciFi,\n}\n\nconst adaptQuestsToClient = (quest) => {\n  return {...quest, type : GenresAdapter[quest.type]}\n}\n\nconst fetchQuestsAction = () =>\n  async (dispatch, _getState, api) => {\n    await api.get('/quests')\n      .then((response) => response.data.map(quest => adaptQuestsToClient(quest)))\n      .then((response) => dispatch(setQuests(response)));\n  };\n\nconst fetchCurrentQuestAction = (questId) =>\n  async (dispatch, _getState, api) => {\n    await api.get(`/quests/${questId}`)\n      .then(response => adaptQuestsToClient(response.data))\n      .then(response => dispatch(setCurrentQuest()));\n  };\n\nconst sendNewOrderAction = (orderPost, closeForm) =>\n  async (_dispatch, _getState, api) => {\n    try{\n      await api.post('/orders', orderPost)\n      .then((response) => {\n        if(response){\n          // toast.info(SUCCES_SEND_ORDER_MESSAGE);\n          closeForm();\n        }\n      });\n    } catch {\n      // toast.error(ERROR_SEND_ORDER_MESSAGE)\n    }\n  };\n\nexport {fetchQuestsAction, fetchCurrentQuestAction, sendNewOrderAction};\n"]},"metadata":{},"sourceType":"module"}